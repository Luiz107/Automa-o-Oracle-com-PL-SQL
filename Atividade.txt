--TABELA USUÁRIOS
CREATE TABLE usuario (
    id_usuario NUMBER(5),
    nome       VARCHAR2(100),
    quilos     NUMBER(3, 0),
    altura     NUMBER(3, 0),
    email      VARCHAR2(100),
    CONSTRAINT pk_usuario PRIMARY KEY ( id_usuario )
);
    
    
--SEQUÊNCIA USUÁRIO   
CREATE SEQUENCE seq_usuario START WITH 1 MAXVALUE 9999 NOCACHE;


--TRIGGER PARA INSERÇÃO AUTOMÁTICO DO ID_USUÁRIO
CREATE OR REPLACE TRIGGER trg_do_usuario BEFORE
    INSERT ON usuario
    FOR EACH ROW
BEGIN
    IF :new.id_usuario IS NULL THEN
        SELECT
            seq_usuario.NEXTVAL
        INTO :new.id_usuario
        FROM
            dual;

    END IF;
END trg_do_usuario;

INSERT INTO usuario (
    nome,
    quilos,
    altura,
    email
) VALUES (
    'Huguinho',
    90,
    170,
    'huguinho@yahoo.com.br'
);

INSERT INTO usuario (
    nome,
    quilos,
    altura,
    email
) VALUES (
    'Zezinho',
    83,
    175,
    'zezinho@yahoo.com.br'
);

COMMIT;


--TRIGGER PARA ALTERAÇÃO DO PESO DO USUÁRIO
SET SERVEROUTPUT ON

CREATE OR REPLACE TRIGGER mudancas_pesos BEFORE
    UPDATE ON usuario
    FOR EACH ROW
DECLARE
    resultado NUMBER;
BEGIN
    resultado := :new.quilos - :old.quilos;
    dbms_output.put_line('Peso anterior: ' || :old.quilos);
    dbms_output.put_line('Peso novo: ' || :new.quilos);
    dbms_output.put_line('Diferença do peso: ' || resultado);
END;
/

SET SERVEROUTPUT ON

BEGIN
    UPDATE usuario
    SET
        quilos = quilos - 5
    WHERE
        id_usuario = 1;

END;
/


 --TABELA ALIMEMNTOS   
CREATE TABLE alimento (
    id_alimento     NUMBER(5),
    nome            VARCHAR2(50),
    carboidrato     NUMBER(7, 0),
    proteina        NUMBER(4, 0),
    gordura_total   NUMBER(4, 0),
    fibra_alimentar NUMBER(4, 0),
    sodio           NUMBER(4, 0),
    CONSTRAINT pk_alimento PRIMARY KEY ( id_alimento )
);

--SEQUÊNCIA ALIMENTO
CREATE SEQUENCE seq_alimento START WITH 1 MAXVALUE 9999 NOCACHE;


--TRIGGER PARA INSERÇÃO AUTOMÁTICO DO ID_ALIMENTO
CREATE OR REPLACE TRIGGER trg_do_alimento BEFORE
    INSERT ON alimento
    FOR EACH ROW
BEGIN
    IF :new.id_alimento IS NULL THEN
        SELECT
            seq_alimento.NEXTVAL
        INTO :new.id_alimento
        FROM
            dual;

    END IF;
END trg_do_alimento;

INSERT INTO alimento (
    nome,
    carboidrato,
    proteina,
    gordura_total,
    fibra_alimentar,
    sodio
) VALUES (
    'maçã',
    1,
    1,
    1,
    1,
    1
);

INSERT INTO alimento (
    nome,
    carboidrato,
    proteina,
    gordura_total,
    fibra_alimentar,
    sodio
) VALUES (
    'pêra',
    2,
    2,
    2,
    2,
    2
);

COMMIT;


--PROCESSO DE ELABORAÇÃO DA TRIGGER PARA AUDITORIA


CREATE TABLE auditoria (
    codigo   NUMBER(5),
    hora     DATE,
    operacao VARCHAR2(6),
    antigo   NUMBER(7, 2),
    novo     NUMBER(7, 2)
);

CREATE OR REPLACE PROCEDURE registra (
    p_codigo   IN VARCHAR2,
    p_operacao IN VARCHAR2,
    p_antigo   IN NUMBER,
    p_novo     IN NUMBER
) AS
    PRAGMA autonomous_transaction;
BEGIN
    INSERT INTO auditoria (
        codigo,
        hora,
        operacao,
        antigo,
        novo
    ) VALUES (
        p_codigo,
        sysdate,
        p_operacao,
        p_antigo,
        p_novo
    );

    COMMIT;
END;
/

SET SERVEROUTPUT ON

CREATE OR REPLACE TRIGGER mudancas_pesos_auditavel BEFORE
    INSERT OR UPDATE OR DELETE ON usuario
    FOR EACH ROW
BEGIN
    CASE
        WHEN inserting THEN
            registra(:new.id_usuario, 'INSERT', :old.quilos, :new.quilos);
        WHEN updating THEN
            registra(:old.id_usuario, 'UPDATE', :old.quilos, :new.quilos);
        WHEN deleting THEN
            registra(:new.id_usuario, 'DELETE', :old.quilos, :new.quilos);
    END CASE;
END;
/

SET SERVEROUTPUT ON

ALTER SESSION SET nls_date_format = 'DD/MM/YY HH24:MI:SS';

INSERT INTO usuario (
    id_usuario,
    quilos
) VALUES (
    4,
    75
);

UPDATE usuario
SET
    quilos = quilos - 1;
WHERE id_usuario = 3;

DELETE FROM usuario
WHERE
    id_usuario = 3;

